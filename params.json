{"name":"Wordpress-factory","tagline":"A Basic Boilerplate for a wordpress plugin factory framework","body":"Wordpress Factory By SourceScript\r\n===\r\nA Well Placed Elegant Wordpress Factory Generated to you by [SourceScript Innovations](http://sourcescript.ph/img/logo.png). The Wordpress Factory is a boilerplate plugin that would allow the developer to use 3rd party classes easily. Not only that you could use 3rd party classes easily, The developer now can autoload's his/her own classes from other frameworks easily. No more procedural development on wordpress plugins, and no more hard-coding development on wordpress plugins.\r\n\r\nThis plugin is <> with <3 for the Open Source Community.\r\n![SourceScript Innovations](http://sourcescript.ph/img/logo.png)\r\n#Installation\r\nYou are required first and foremost to download [The Composer](http://getcomposer.org/download). After you have downloaded and installed this plugin. all you have to do is run 'php composer.phar install --prefer-dist'\r\nYou will be then given one beautiful placed folder ```app``` this folder has two folders inside, the ```functions``` and the ```views``` the ```functions``` component will harbor all of your autoloaded class files (with / without) namespaces. While the ```views``` folder (you guessed it right) harbors all the template files generated by Twig. Yes, Awesome isn't it! We use twig! on Wordpress!\r\n##Configurations\r\nAll configuration shall be manifested under ```app.php```. \r\n###Configuring the Options Page\r\nIs it hard to create your own options page WITH elegance on wordpress? Now its autoloaded for you, all you have to do is open and edit ```app.php``` it houses a 'options'. These would hold the 4 required files.\r\n\r\nIf editing the files are too much of a burden, you open the ```functions/OptionsPage.php``` and edit it yourself. The Views component is autoloaded already under ```views/options/options.html.twig```.\r\n\r\n#Calling The Views Component\r\nWe Have graciously wrapped Twig for you.\r\nall you have to do is\r\n```php\r\n\techo View::factorize('options/options.html.twig')->load();\r\n```\r\n\r\nYou may add parameters\r\n```php\r\n\techo View::factorize('options/options.html.twig')->load(['title'=>'Options Title', 'content'=>'content']);\r\n```\r\n#Asset Loading\r\nGetting tedious and irritated with having to load alot of wp_enqueue_stlye or wp_enqueue_scripts? Now you don't have to all you have to do is load\r\n```php\r\nAsset::factorize('back','styles')->queue();  // for back end scripts \r\n//and\r\nAsset::factorize('back','scripts')->queue(); // for back end styles\r\n```\r\nYou are required two parameters ```loc``` and ```type``` consecutively, each will load separate config files depending on what you need. the following examples shall load \r\n\r\n```config\\back_styles_assets.php```\r\nand\r\n```config\\back-scripts_assets.php```\r\nthe format you are required to have is <loc>_<type>_assets.php\r\n#Adding more packages\r\nYou may add your own packages with the use of composer. After downloading the composer file you may easily autoload it with ```app.php``` just add your folder like so.\r\n```php\r\n\t'libs'\t=> array(\r\n\t\t\t'MyLib' \t\t=> base_path().'/../vendor/sourcescript/wf-core-framework/src', //add your own file\r\n\t\t),\r\n```\r\n#Made With Love Using\r\n\t-Symfony\r\n\t-Twig","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}